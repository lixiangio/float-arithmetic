{
   /*
	// Place your snippets for JavaScript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	"标题": {
		"prefix": "log",//匹配条件
		"body": [
			"console.log('$1')",//第一行 $1：定义光标锚点
			"$2"// 第二行
		],
		"description": "描述信息"
	},
*/
   "console": {
      "prefix": "log",
      "body": [
         "console.log($1)"
      ],
      "description": "Log output to console"
   },
   "validator验证器": {
      "prefix": "=validator",
      "body": [
         "let { error, data } = Validator(ctx.request.body, {",
         "\t$1",
         "})",
         "",
         "if (error) {",
         "\tctx.body = {",
         "\t\terrorCode: 1000,",
         "\t\tmsg: error",
         "\t}",
         "\treturn",
         "}",
         ""
      ]
   },
   "pgsql create": {
      "prefix": "=create",
      "body": [
         "await \\$models.create(data).then(data => {",
         "\tctx.body = {",
         "\t\terrorCode: 0,",
         "\t\tdata: data,",
         "\t}",
         "}).catch(err => {",
         "\t\tctx.throw(err)",
         "})",
         ""
      ]
   },
   "pgsql findAll": {
      "prefix": "=findAll",
      "body": [
         "let \\$name = await \\$models.findAll({",
         "\twhere,",
         "\tattributes: {",
         "\t\texclude: ['\\$field']",
         "\t},",
         "\toffset: (page - 1) * limit,",
         "\tlimit: limit,",
         "\torder: [['\\$field', 'DESC']],",
         "})",
         ""
      ]
   },
   "pgsql findOne": {
      "prefix": "=findOne",
      "body": [
         "await \\$name.findOne({ 'userName': search })",
         ""
      ]
   },
   "pgsql findById": {
      "prefix": "=findById",
      "body": [
         "await \\$name.findById(\\$id,{ 'userName': search })",
         ""
      ]
   },
   "pgsql update": {
      "prefix": "=update",
      "body": [
         "await \\$name.update(data, {",
         "\twhere: {",
         "\t\tid: ctx.params.id",
         "\t},",
         "\tlimit: 1,",
         "}).then(data => {",
         "\tctx.body = {",
         "\t\terrorCode: 0,",
         "\t\tdata: data,",
         "\t}",
         "}).catch(err => {",
         "\tctx.throw(err)",
         "})",
         ""
      ]
   },
   "rest api": {
      "prefix": "=rest",
      "body": [
         "exports.create = async ctx => {",
         "\t$1",
         "}",
         "",
         "exports.get = async ctx => {",
         "",
         "}",
         "",
         "exports.getById = async ctx => {",
         "",
         "}",
         "",
         "exports.update = async ctx => {",
         "",
         "}",
         "",
         "exports.delete = async ctx => {",
         "",
         "}",
         ""
      ]
   },
   "aip get": {
      "prefix": "=get",
      "body": [
         "exports.get = async ctx => {",
         "\t$1",
         "}",
         ""
      ]
   },
   "aip getById": {
      "prefix": "=getById",
      "body": [
         "exports.getById = async ctx => {",
         "\t$1",
         "}",
         ""
      ]
   },
   "aip create": {
      "prefix": "=create",
      "body": [
         "exports.create = async ctx => {",
         "\t$1",
         "}",
         ""
      ]
   },
   "aip update": {
      "prefix": "=update",
      "body": [
         "exports.update = async ctx => {",
         "\t$1",
         "}",
         ""
      ]
   },
   "aip delete": {
      "prefix": "=delete",
      "body": [
         "exports.delete = async ctx => {",
         "\t$1",
         "}",
         ""
      ]
   }
}